version: "3.8"
services:

  gateway:
    image: nginx:1.19.8-alpine
    expose: 
      - '443'
    ports: 
      - '443:443'
    networks:
      - backend
    volumes:
      - ./Microservices/Gateway/nginx.conf:/etc/nginx/nginx.conf
      - ./Microservices/Gateway/api_gateway.conf:/etc/nginx/api_gateway.conf

  db-auth:
    image: postgres 
    container_name: db-auth
    environment: 
      POSTGRES_PASSWORD: root
    expose: 
      - '5432'
    networks:
      - backend 
    volumes:
      - ./db_init_scripts/auth:/docker-entrypoint-initdb.d/

  db:
    image: postgres
    container_name: postgres
    environment:
      POSTGRES_PASSWORD: root
    expose: 
      - '5432'
    networks:
      - backend 
    volumes:
      - ./db_init_scripts/profile:/docker-entrypoint-initdb.d/

  db-profile-management:
    image: postgres
    container_name: db-profile-management
    environment:
      POSTGRES_PASSWORD: root
    expose: 
      - '5432'
    networks:
      - backend 
    volumes:
      - ./db_init_scripts/:/docker-entrypoint-initdb.d/

  db-post:
    image: "redis:alpine"
    container_name: db-post
    command: redis-server
    ports:
      - "6399:6379"
    environment:
      - REDIS_REPLICATION_MODE=master
      - ALLOW_EMPTY_PASSWORD=yes
    networks:
      - backend

  db-followers:
    image: neo4j:latest
    hostname: neo4j
    container_name: db-followers
    ports:
      - "7474:7474"
      - "7687:7687"
    networks:
      - backend 
    environment:
      NEO4J_AUTH: neo4j/root

  profile-service:
    image: profile-service
    build:
      context: ./Microservices/profile-service
      dockerfile: Dockerfile
    networks:
      - backend
    environment:
      - HOST_NAME=db
    expose: 
      - '8085'

  profile-management-service:
    image: profile-management-service
    build:
      context: ./Microservices/profile-management-service
      dockerfile: Dockerfile
    networks:
      - backend
    environment:
      - HOST_NAME=db-profile-management
    expose: 
      - '8087'

  post-service:
    image: post-service
    build:
      context: ./Microservices/post-service
      dockerfile: Dockerfile
    networks:
      - backend
    environment:
      - HOST_NAME=db-post
    expose: 
      - '8086'

  auth-service:
    image: auth-service
    build:
      context: ./Microservices/auth-service
      dockerfile: Dockerfile
    networks:
      - backend
    volumes: 
      - ./Microservices/post-service/user_posts/:/app/post-service/user_posts/
    environment:
      - HOST_NAME=db-auth
    expose: 
      - '8080'

  followers-microservice:
    image: followers-microservice
    build:
      context: ./Microservices/followers-microservice
      dockerfile: Dockerfile
    networks:
      - backend
    environment:
      - HOST_NAME=db-followers
    expose: 
      - '8088'

networks:
  backend:
    name: nistagram
    driver: bridge