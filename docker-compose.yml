version: "3.8"
services:

  gateway:
    image: gateway
    container_name: gateway
    build:
      context: ./Microservices/gateway
      dockerfile: Dockerfile
    expose: 
      - '80'
    ports: 
      - '80:80'
    networks:
      - backend

  db:
    image: postgres
    container_name: db
    environment:
      POSTGRES_PASSWORD: root
    ports:
      - '5432:5432'
    networks:
      - backend 
    volumes:
      - ./db_init_scripts/profile:/docker-entrypoint-initdb.d/

  db-profile-management:
    image: postgres
    container_name: db-profile-management
    environment:
      POSTGRES_PASSWORD: root
    ports:
      - '5431:5432'
    networks:
      - backend 
    volumes:
      - ./db_init_scripts/:/docker-entrypoint-initdb.d/

  db-messages:
    image : mongo
    container_name: db-messages
    environment:
    - PUID=1000
    - PGID=1000
    ports:
    - 27017:27017
    networks:
      - backend
    restart: unless-stopped

  db-story:
    image: "redis:alpine"
    container_name: db-story
    command: redis-server
    ports:
      - "6379:6379"
    environment:
      - REDIS_REPLICATION_MODE=master
      - ALLOW_EMPTY_PASSWORD=yes
    networks:
      - backend

  db-post:
    image: "redis:alpine"
    container_name: db-post
    command: redis-server
    ports:
      - "6399:6379"
    environment:
      - REDIS_REPLICATION_MODE=master
      - ALLOW_EMPTY_PASSWORD=yes
    networks:
      - backend
  
  db-saga:
    image: "redis:alpine"
    container_name: db-saga
    command: redis-server
    ports:
      - "6389:6379"
    environment:
      - REDIS_REPLICATION_MODE=master
      - ALLOW_EMPTY_PASSWORD=yes
    networks:
      - backend

  db-admin:
    image: postgres
    container_name: db-admin
    environment:
      POSTGRES_PASSWORD: root
    ports:
      - '5434:5432'
    networks:
      - backend 
    volumes:
      - ./db_init_scripts/admin:/docker-entrypoint-initdb.d/

  db-auth:
    image: postgres
    container_name: db-auth
    environment:
      POSTGRES_PASSWORD: root
    ports:
      - '5433:5432'
    networks:
      - backend 
    volumes:
      - ./db_init_scripts/auth:/docker-entrypoint-initdb.d/

  db-followers:
    image: neo4j:latest
    hostname: neo4j
    container_name: db-followers
    ports:
      - "7474:7474"
      - "7687:7687"
    networks:
      - backend 
    environment:
      NEO4J_AUTH: neo4j/root

  profile-service:
    container_name: profile-service
    image: profile-service
    build:
      context: ./Microservices/profile-service
      dockerfile: Dockerfile
    networks:
      - backend
    environment:
      - HOST_NAME=db
      - SAGA_HOST_NAME=db-saga
    expose: 
      - '8085'
    ports: 
      - '8085:8085'

  profile-management-service:
    container_name: profile-management-service
    image: profile-management-service
    build:
      context: ./Microservices/profile-management-service
      dockerfile: Dockerfile
    networks:
      - backend
    environment:
      - HOST_NAME=db-profile-management
    expose: 
      - '8087'
    ports: 
      - '8087:8087'

  messages-service:
    container_name: messages-service
    image: messages-service
    build:
      context: ./Microservices/messages-service
      dockerfile: Dockerfile
    networks:
      - backend
    environment:
      - HOST_NAME=db-messages
    expose: 
      - '8002'
    ports: 
      - '8002:8002'

  story-service:
    container_name: story-service
    image: story-service
    build:
      context: ./Microservices/story-service
      dockerfile: Dockerfile
    networks:
      - backend
    environment:
      - HOST_NAME=db-story
    expose: 
      - '8083'
    ports: 
      - '8083:8083'
    volumes:
      - ./Microservices/story-service/user_stories/:/app/story-service/user_stories/

  post-service:
    container_name: post-service
    image: post-service
    build:
      context: ./Microservices/post-service
      dockerfile: Dockerfile
    networks:
      - backend
    environment:
      - HOST_NAME=db-post
    expose: 
      - '8086'
    ports: 
      - '8086:8086'

  admin-service:
    container_name: admin-service
    image: admin-service
    build:
      context: ./Microservices/admin-service
      dockerfile: Dockerfile
    networks:
      - backend
    environment:
      - HOST_NAME=db-admin
    expose: 
      - '8089'
    ports: 
      - '8089:8089'

  auth-service:
    container_name: auth-service
    image: auth-service
    build:
      context: ./Microservices/auth-service
      dockerfile: Dockerfile
    networks:
      - backend
    expose: 
      - '8080'
    ports: 
      - '8080:8080'

  followers-microservice:
    container_name: followers-microservice
    image: followers-microservice
    build:
      context: ./Microservices/followers-microservice
      dockerfile: Dockerfile
    networks:
      - backend
    environment:
      - HOST_NAME=db-followers
      - SAGA_HOST_NAME=db-saga
    expose: 
      - '8088'
    ports: 
      - '8088:8088'

  front:
    container_name: front
    image: front
    build:
      context: ./front
      dockerfile: Dockerfile
    networks:
      - backend
    expose: 
      - '4200'
    ports: 
      - '4200:4200'

networks:
  backend:
    name: nistagram
    driver: bridge